version: '3.5'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    environment:
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"
      start_period: 1m
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.8.0
#    container_name: service-kibana
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#
  logstash:
    image: docker.elastic.co/logstash/logstash:7.8.0
    container_name: service-logstash
    command: logstash -f /usr/share/logstash/pipeline
    volumes:
      - ./containerized-logstash/config:/usr/share/logstash/config:ro
      - ./containerized-logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "12204:12204"
    depends_on:
      - elasticsearch
#
#  filebeat:
#    image: docker.elastic.co/beats/filebeat:7.8.0
#    volumes:
#      - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
#      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
#      - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
#    user: root                                                             # Allow access to log files and docker.sock
#    restart: on-failure
#    depends_on:
#      - logstash

  discovery:
    image: tanerdiler/service-discovery
    container_name: service-discovery
    build:
      context: ./containerized-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      - logstash

  gateway:
    image: tanerdiler/service-gateway
    container_name: service-gateway
    build:
      context: ./containerized-gateway
      dockerfile: Dockerfile
    ports:
      - "8762:8762"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
    depends_on:
      - discovery
      - logstash

  accounts:
    image: tanerdiler/service-accounts-api
    container_name: service-accounts
    build:
      context: ./containerized-accounts
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
    depends_on:
      - discovery
      - logstash
    links:
      - discovery

  products:
    image: tanerdiler/service-products-api
    container_name: service-products
    build:
      context: ./containerized-products
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
    depends_on:
      - discovery
      - logstash
    links:
      - discovery

  orders:
    image: tanerdiler/service-orders-api
    container_name: service-orders
    build:
      context: ./containerized-orders
      dockerfile: Dockerfile
    ports:
      - "8092:8092"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
    depends_on:
      - discovery
      - products
      - logstash
    links:
      - discovery

  main:
    image: tanerdiler/service-main-api
    container_name: service-main
    build:
      context: ./containerized-main
      dockerfile: Dockerfile
    ports:
      - "8093:2222"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
    depends_on:
      - discovery
      - orders
      - logstash